{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "33e5f333-7694-4136-8252-ac4c739b2f0d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.1 Customer Bills:\n",
      "Anna: UGX 10,660 (Domestic)\n",
      "dan: UGX 123,000 (Domestic)\n",
      "jerry: UGX 2,000,000 (Commercial)\n",
      "micheal: UGX 28,700 (Domestic)\n",
      "alpha: UGX 13,120 (Domestic)\n",
      "don: UGX 750,000 (Commercial)\n",
      "luke: UGX 9,840 (Domestic)\n",
      "doryn: UGX 14,760 (Domestic)\n",
      "seth: UGX 75,440 (Domestic)\n",
      "tim: UGX 86,100 (Domestic)\n",
      "\n",
      "1.2 High Consumption Customers (units > 500):\n",
      "jerry: 2000 units\n",
      "don: 750 units\n",
      "\n",
      "1.3 Average Bill Calculation:\n",
      "All bills: ['UGX 10,660', 'UGX 123,000', 'UGX 2,000,000', 'UGX 28,700', 'UGX 13,120', 'UGX 750,000', 'UGX 9,840', 'UGX 14,760', 'UGX 75,440', 'UGX 86,100']\n",
      "Average bill: UGX 311,162.00\n",
      "\n",
      "1.4 Formatted Customer Bills:\n",
      "Anna: UGX 10,660\n",
      "dan: UGX 123,000\n",
      "jerry: UGX 2,000,000\n",
      "micheal: UGX 28,700\n",
      "alpha: UGX 13,120\n",
      "don: UGX 750,000\n",
      "luke: UGX 9,840\n",
      "doryn: UGX 14,760\n",
      "seth: UGX 75,440\n",
      "tim: UGX 86,100\n",
      "\n",
      "SUMMARY:\n",
      "Total customers: 10\n",
      "Domestic customers: 9\n",
      "Commercial customers: 2\n",
      "Total revenue: UGX 3,111,620\n",
      "Highest bill: UGX 2,000,000\n",
      "Lowest bill: UGX 9,840\n"
     ]
    }
   ],
   "source": [
    "# 1.1 Using zip() and map() to pair customer names with total bills\n",
    "# the zip() and map() function\n",
    "name = ['Anna', 'dan','jerry' , 'micheal', 'alpha', 'don', 'luke', 'doryn', 'seth', 'tim']\n",
    "units = [13, 150, 2000, 35, 16, 750, 12, 18, 92, 105, 16]\n",
    "\n",
    "# Domestic rate = 820 UGX/unit, Commercial rate = 1000 UGX/unit\n",
    "DOMESTIC_RATE = 820\n",
    "COMMERCIAL_RATE = 1000\n",
    "\n",
    "# Calculate bills using lambda with conditional logic\n",
    "customer_bills = list(zip(\n",
    "    name,\n",
    "    map(lambda unit: unit * DOMESTIC_RATE if unit <= 500 else unit * COMMERCIAL_RATE, units)\n",
    "))\n",
    "\n",
    "print(\"1.1 Customer Bills:\")\n",
    "for customer, bill in customer_bills:\n",
    "    customer_type = \"Domestic\" if units[name.index(customer)] <= 500 else \"Commercial\"\n",
    "    print(f\"{customer}: UGX {bill:,} ({customer_type})\")\n",
    "print()\n",
    "\n",
    "# 1.2 Use filter() to separate high-consumption customers (units > 500)\n",
    "high_consumption_customers = list(filter(lambda x: x[1] > 500, zip(name, units)))\n",
    "\n",
    "print(\"1.2 High Consumption Customers (units > 500):\")\n",
    "for customer, unit in high_consumption_customers:\n",
    "    print(f\"{customer}: {unit} units\")\n",
    "print()\n",
    "\n",
    "# 1.3 Using *args, write a function average_bill(*bills) that computes the average\n",
    "def average_bill(*bills):\n",
    "    \"\"\"Calculate average of bills using *args\"\"\"\n",
    "    if not bills:\n",
    "        return 0\n",
    "    return sum(bills) / len(bills)\n",
    "\n",
    "# Extract just the bill amounts from customer_bills\n",
    "bill_amounts = [bill for _, bill in customer_bills]\n",
    "average = average_bill(*bill_amounts)\n",
    "\n",
    "print(\"1.3 Average Bill Calculation:\")\n",
    "print(f\"All bills: {[f'UGX {bill:,}' for bill in bill_amounts]}\")\n",
    "print(f\"Average bill: UGX {average:,.2f}\")\n",
    "print()\n",
    "\n",
    "# 1.4 Display results using list comprehension in the specified format\n",
    "formatted_customers = [f\"{customer}: UGX {bill:,}\" for customer, bill in customer_bills]\n",
    "\n",
    "print(\"1.4 Formatted Customer Bills:\")\n",
    "for formatted_bill in formatted_customers:\n",
    "    print(formatted_bill)\n",
    "print()\n",
    "\n",
    "# Additional analysis - Summary\n",
    "print(\"SUMMARY:\")\n",
    "print(f\"Total customers: {len(name)}\")\n",
    "print(f\"Domestic customers: {len([u for u in units if u <= 500])}\")\n",
    "print(f\"Commercial customers: {len([u for u in units if u > 500])}\")\n",
    "print(f\"Total revenue: UGX {sum(bill_amounts):,}\")\n",
    "print(f\"Highest bill: UGX {max(bill_amounts):,}\")\n",
    "print(f\"Lowest bill: UGX {min(bill_amounts):,}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2ecb0b04-7679-4406-9585-3089e840e2b8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.1 All prices together:\n",
      "[(2500, 3000, 4500), (2700, 3200, 4600), (2600, 3100, 4550), (2800, 3050, 4700)]\n",
      "\n",
      "2.2 Average prices:\n",
      "Mango: 2650.0\n",
      "Orange: 3087.5\n",
      "Apple: 4587.5\n",
      "\n",
      "2.4 Fruits Above Average Price:\n",
      "Fruits Above Average Price: Orange, Apple\n"
     ]
    }
   ],
   "source": [
    "# Fruit prices from different vendors\n",
    "mango_prices = [2500, 2700, 2600, 2800]\n",
    "orange_prices = [3000, 3200, 3100, 3050]\n",
    "apple_prices = [4500, 4600, 4550, 4700]\n",
    "\n",
    "# 2.1 zip_longest to handle missing prices\n",
    "from itertools import zip_longest\n",
    "\n",
    "all_prices = list(zip_longest(mango_prices, orange_prices, apple_prices, fillvalue=0))\n",
    "print(\"2.1 All prices together:\")\n",
    "print(all_prices)\n",
    "print()\n",
    "\n",
    "# 2.2 Lambda function for average\n",
    "avg = lambda lst: sum(lst) / len(lst)\n",
    "\n",
    "mango_avg = avg(mango_prices)\n",
    "orange_avg = avg(orange_prices)\n",
    "apple_avg = avg(apple_prices)\n",
    "\n",
    "print(\"2.2 Average prices:\")\n",
    "print(f\"Mango: {mango_avg}\")\n",
    "print(f\"Orange: {orange_avg}\")\n",
    "print(f\"Apple: {apple_avg}\")\n",
    "print()\n",
    "\n",
    "# 2.3 Generator for fruits above 3000\n",
    "fruits = [\"Mango\", \"Orange\", \"Apple\"]\n",
    "averages = [mango_avg, orange_avg, apple_avg]\n",
    "\n",
    "high_price_fruits = (fruits[i] for i in range(3) if averages[i] > 3000)\n",
    "\n",
    "# 2.4 Print the results\n",
    "print(\"2.4 Fruits Above Average Price:\")\n",
    "result = list(high_price_fruits)\n",
    "print(\"Fruits Above Average Price: \" + \", \".join(result))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2d72ebbc-a960-4e9f-85ab-6e1413b3fe37",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.1 Temperatures in Fahrenheit:\n",
      "Kampala: [82.4, 86.0, 84.2, 80.6, 78.8, 84.2, 86.0, 87.8, 89.6, 86.0, 84.2, 82.4]\n",
      "Gulu: [77.0, 78.8, 80.6, 80.6, 82.4, 84.2, 86.0, 86.0, 84.2, 80.6, 78.8, 77.0]\n",
      "Mbarara: [71.6, 73.4, 73.4, 75.2, 77.0, 77.0, 78.8, 80.6, 80.6, 78.8, 75.2, 73.4]\n",
      "\n",
      "3.2 Months with Kampala temperatures:\n",
      "[('Jan', 28), ('Feb', 30), ('Mar', 29), ('Apr', 27), ('May', 26), ('Jun', 29), ('Jul', 30), ('Aug', 31), ('Sep', 32), ('Oct', 30), ('Nov', 29), ('Dec', 28)]\n",
      "\n",
      "3.3 Months hotter than 30°C:\n",
      "[('Aug', 31), ('Sep', 32)]\n",
      "\n",
      "3.5 Hot months in Kampala:\n",
      "Aug - 31°C, Sep - 32°C\n"
     ]
    }
   ],
   "source": [
    "# Temperature data\n",
    "kampala = [28, 30, 29, 27, 26, 29, 30, 31, 32, 30, 29, 28]\n",
    "gulu = [25, 26, 27, 27, 28, 29, 30, 30, 29, 27, 26, 25]\n",
    "mbarara = [22, 23, 23, 24, 25, 25, 26, 27, 27, 26, 24, 23]\n",
    "\n",
    "# 3.1 Convert to Fahrenheit using map() and lambda\n",
    "kampala_f = list(map(lambda c: (c * 9/5) + 32, kampala))\n",
    "gulu_f = list(map(lambda c: (c * 9/5) + 32, gulu))\n",
    "mbarara_f = list(map(lambda c: (c * 9/5) + 32, mbarara))\n",
    "\n",
    "print(\"3.1 Temperatures in Fahrenheit:\")\n",
    "print(f\"Kampala: {kampala_f}\")\n",
    "print(f\"Gulu: {gulu_f}\")\n",
    "print(f\"Mbarara: {mbarara_f}\")\n",
    "print()\n",
    "\n",
    "# 3.2 Pair months with Kampala temps using zip()\n",
    "months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n",
    "kampala_months = list(zip(months, kampala))\n",
    "\n",
    "print(\"3.2 Months with Kampala temperatures:\")\n",
    "print(kampala_months)\n",
    "print()\n",
    "\n",
    "# 3.3 Filter months with temperature > 30°C\n",
    "hot_months = list(filter(lambda x: x[1] > 30, kampala_months))\n",
    "\n",
    "print(\"3.3 Months hotter than 30°C:\")\n",
    "print(hot_months)\n",
    "print()\n",
    "\n",
    "# 3.4 Generator for month names and temperatures above threshold\n",
    "def hot_month_generator():\n",
    "    for month, temp in kampala_months:\n",
    "        if temp > 30:\n",
    "            yield month, temp\n",
    "\n",
    "hot_gen = hot_month_generator()\n",
    "\n",
    "# 3.5 Print the results\n",
    "print(\"3.5 Hot months in Kampala:\")\n",
    "hot_list = list(hot_gen)\n",
    "result = \", \".join([f\"{month} - {temp}°C\" for month, temp in hot_list])\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9a8ecb4d-9956-4c3c-a77e-e78caaeadcf9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4.2 Total paid by each student:\n",
      "Alex: 600000\n",
      "Grace: 700000\n",
      "Sarah: 900000\n",
      "Brian: 500000\n",
      "\n",
      "4.3 Students with their totals:\n",
      "[('Alex', 600000), ('Grace', 700000), ('Sarah', 900000), ('Brian', 500000)]\n",
      "\n",
      "4.4 Students who cleared full fees:\n",
      "[('Alex', 600000), ('Grace', 700000), ('Sarah', 900000)]\n",
      "\n",
      "4.5 Payment summary:\n",
      "Alex paid: 600000 UGX\n",
      "Grace paid: 700000 UGX\n",
      "Sarah paid: 900000 UGX\n",
      "Brian paid: 500000 UGX\n"
     ]
    }
   ],
   "source": [
    "# Installment data\n",
    "students = ['Alex', 'Grace', 'Sarah', 'Brian']\n",
    "installments = [\n",
    "    [150000, 200000, 250000],\n",
    "    [500000, 0, 200000],\n",
    "    [300000, 300000, 300000],\n",
    "    [400000, 100000, 0]\n",
    "]\n",
    "\n",
    "# 4.1 Lambda function to sum valid payments (ignore zeros)\n",
    "sum_valid = lambda payments: sum([p for p in payments if p > 0])\n",
    "\n",
    "# 4.2 Use map() to compute total paid by each student\n",
    "totals = list(map(sum_valid, installments))\n",
    "\n",
    "print(\"4.2 Total paid by each student:\")\n",
    "for i in range(len(students)):\n",
    "    print(f\"{students[i]}: {totals[i]}\")\n",
    "print()\n",
    "\n",
    "# 4.3 Combine student names and totals using zip()\n",
    "student_totals = list(zip(students, totals))\n",
    "\n",
    "print(\"4.3 Students with their totals:\")\n",
    "print(student_totals)\n",
    "print()\n",
    "\n",
    "# 4.4 Filter students who have cleared full fees (≥600,000)\n",
    "cleared_fees = list(filter(lambda x: x[1] >= 600000, student_totals))\n",
    "\n",
    "print(\"4.4 Students who cleared full fees:\")\n",
    "print(cleared_fees)\n",
    "print()\n",
    "\n",
    "# 4.5 payment_summary function\n",
    "def payment_summary(**kwargs):\n",
    "    for student, amount in kwargs.items():\n",
    "        print(f\"{student} paid: {amount} UGX\")\n",
    "\n",
    "print(\"4.5 Payment summary:\")\n",
    "# Create dictionary from student totals\n",
    "payment_data = {}\n",
    "for student, total in student_totals:\n",
    "    payment_data[student] = total\n",
    "\n",
    "payment_summary(**payment_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e9257652-7a00-46bd-af99-0b04b7ab63c1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5.1 Yields in tons:\n",
      "Bushenyi: 1.2 tons\n",
      "Mityana: 1.5 tons\n",
      "Kasese: 0.9 tons\n",
      "Mbale: 1.3 tons\n",
      "\n",
      "5.2 Districts with yield > 1 ton:\n",
      "['Bushenyi', 'Mityana', 'Mbale']\n",
      "\n",
      "5.3 Average yield:\n",
      "Average: 1.225 tons\n",
      "\n",
      "5.4 Revenue calculation:\n",
      "Bushenyi produced 1.2 tons — Revenue: UGX 6,000,000\n",
      "Mityana produced 1.5 tons — Revenue: UGX 6,750,000\n",
      "Kasese produced 0.9 tons — Revenue: UGX 4,500,000\n",
      "Mbale produced 1.3 tons — Revenue: UGX 6,240,000\n"
     ]
    }
   ],
   "source": [
    "# Yield data\n",
    "districts = ['Bushenyi', 'Mityana', 'Kasese', 'Mbale']\n",
    "yield_data = [1200, 1500, 900, 1300]\n",
    "\n",
    "# 5.1 List comprehension with lambda to convert kg to tons\n",
    "kg_to_ton = lambda kg: kg / 1000\n",
    "yield_tons = [kg_to_ton(y) for y in yield_data]\n",
    "\n",
    "print(\"5.1 Yields in tons:\")\n",
    "for i in range(len(districts)):\n",
    "    print(f\"{districts[i]}: {yield_tons[i]} tons\")\n",
    "print()\n",
    "\n",
    "# 5.2 Generator for districts with yield > 1 ton\n",
    "def high_yield_generator():\n",
    "    for i in range(len(districts)):\n",
    "        if yield_tons[i] > 1:\n",
    "            yield districts[i]\n",
    "\n",
    "high_yield = list(high_yield_generator())\n",
    "print(\"5.2 Districts with yield > 1 ton:\")\n",
    "print(high_yield)\n",
    "print()\n",
    "\n",
    "# 5.3 *args to compute average yield\n",
    "def average_yield(*args):\n",
    "    return sum(args) / len(args)\n",
    "\n",
    "avg = average_yield(*yield_tons)\n",
    "print(\"5.3 Average yield:\")\n",
    "print(f\"Average: {avg} tons\")\n",
    "print()\n",
    "\n",
    "# 5.4 **kwargs for price changes and revenue\n",
    "def calculate_revenue(**kwargs):\n",
    "    for district, price in kwargs.items():\n",
    "        index = districts.index(district)\n",
    "        tons = yield_tons[index]\n",
    "        revenue = tons * price\n",
    "        print(f\"{district} produced {tons} tons — Revenue: UGX {revenue:,.0f}\")\n",
    "\n",
    "print(\"5.4 Revenue calculation:\")\n",
    "prices = {'Bushenyi': 5000000, 'Mityana': 4500000, 'Kasese': 5000000, 'Mbale': 4800000}\n",
    "calculate_revenue(**prices)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e4dd91c7-6d80-46ea-a153-1f9bfb171c25",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6.1 Status codes:\n",
      "{'https://ucu.ac.ug': 200, 'https://harba.ug': 200, 'https://www.bou.or.ug': 200}\n",
      "\n",
      "6.2 Working sites (status 200):\n",
      "['https://ucu.ac.ug', 'https://harba.ug', 'https://www.bou.or.ug']\n",
      "\n",
      "6.3 Results dictionary:\n",
      "{'https://ucu.ac.ug': 200, 'https://harba.ug': 200, 'https://www.bou.or.ug': 200}\n",
      "\n",
      "6.4 Active sites:\n",
      "Active Site: https://ucu.ac.ug\n",
      "Active Site: https://harba.ug\n",
      "Active Site: https://www.bou.or.ug\n"
     ]
    }
   ],
   "source": [
    "# Web Data Aggregation\n",
    "import requests\n",
    "\n",
    "sites = ['https://ucu.ac.ug', 'https://harba.ug', 'https://www.bou.or.ug']\n",
    "\n",
    "# 6.1 Function with *urls to get response codes\n",
    "def get_status_codes(*urls):\n",
    "    status_codes = {}\n",
    "    for url in urls:\n",
    "        try:\n",
    "            response = requests.get(url)\n",
    "            status_codes[url] = response.status_code\n",
    "        except:\n",
    "            status_codes[url] = \"Error\"\n",
    "    return status_codes\n",
    "\n",
    "status_codes = get_status_codes(*sites)\n",
    "print(\"6.1 Status codes:\")\n",
    "print(status_codes)\n",
    "print()\n",
    "\n",
    "# 6.2 List comprehension for URLs with status 200\n",
    "working_sites = [url for url in sites if status_codes.get(url) == 200]\n",
    "print(\"6.2 Working sites (status 200):\")\n",
    "print(working_sites)\n",
    "print()\n",
    "\n",
    "# 6.3 Dictionary comprehension to store results\n",
    "results = {url: status_codes[url] for url in sites}\n",
    "print(\"6.3 Results dictionary:\")\n",
    "print(results)\n",
    "print()\n",
    "\n",
    "# 6.4 Generator expression for active sites\n",
    "active_sites = ('Active Site: ' + url for url in sites if status_codes.get(url) == 200)\n",
    "\n",
    "print(\"6.4 Active sites:\")\n",
    "for site in active_sites:\n",
    "    print(site)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "17d8745b-fd28-4bcc-be01-9936333d0c75",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
